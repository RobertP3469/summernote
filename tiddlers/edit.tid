/*\
title: $:/RobertP3469/modules/widgets/edit.js
type: application/javascript
module-type: widget
\*/

if($tw.browser )   {
	(function(){
		"use strict";
		
		var ready = false;
		
		var Widget = require("$:/core/modules/widgets/widget.js").widget;
		
		var EditHtmlWidget = function(parseTreeNode,options) {
			this.initialise(parseTreeNode,options);
		};
		
		/*
		Inherit from the base widget class
		*/
		EditHtmlWidget.prototype = new Widget();
		
		EditHtmlWidget.prototype.postRender = function() {
			var self = this;
			if($tw.browser && this.editTag === "textarea") {

				$(".tw-summernote-instance textarea").summernote({
						height: 300,
						toolbar: [
							  ['style', ['style']],
							  ['font', ['bold', 'underline', 'clear']],
							  ['fontname', ['fontname']],
							  ['color', ['color']],
							  ['para', ['ul', 'ol', 'paragraph']],
							  ['table', ['table']],
							  ['insert', ['link', 'picture', 'video', 'summernoteWikiEmbed']],
							  ['view', ['fullscreen', 'codeview', 'help']],
						]
				});


				var el = document.querySelector(".tw-summernote-instance .note-editable");
				var observer = new MutationObserver(function(mutations) {
					self.saveChanges(el.innerHTML);
				});
				var config = { characterData: true, attributes: false, childList: true, subtree: true };
				observer.observe(el, config);
			}	
		
		};
		
		EditHtmlWidget.prototype.render = function(parent,nextSibling) {
			
			// Save the parent dom node
			this.parentDomNode = parent;
			// Compute our attributes
			this.computeAttributes();
			// Execute our logic
			this.execute();	

			// Create our element
			var outerDomNode = this.document.createElement('div');
				outerDomNode.className = "tw-summernote-instance";
			var domNode = this.document.createElement(this.editTag);			
				
			if(this.editPlaceholder) {
				domNode.setAttribute("placeholder",this.editPlaceholder);
			}

			// Assign classes
			if(this.editClass) {
				domNode.className = this.editClass;
			}

			// Set the text
			var editInfo = this.getEditInfo();
			if(this.editTag === "textarea") {			
				domNode.appendChild(this.document.createTextNode(editInfo.value));
			} else {
				alert("summernote editor only works with textarea")
			}				

			outerDomNode.appendChild(domNode);
			// Insert the element into the DOM
			parent.insertBefore(outerDomNode,nextSibling);
			this.domNodes.push(outerDomNode);			
				
			if(this.postRender) {
				this.postRender();
			}			
		};	
		
		/*
		Get the tiddler being edited and current value
		*/
		EditHtmlWidget.prototype.getEditInfo = function() {
			// Get the edit value
			var self = this,
				value,
				update;
			if(this.editIndex) {
				value = this.wiki.extractTiddlerDataItem(this.editTitle,this.editIndex,this.editDefault);
				update = function(value) {
					var data = self.wiki.getTiddlerData(self.editTitle,{});
					if(data[self.editIndex] !== value) {
						data[self.editIndex] = value;
						self.wiki.setTiddlerData(self.editTitle,data);
					}
				};
			} else {
				// Get the current tiddler and the field name
				var tiddler = this.wiki.getTiddler(this.editTitle);
				if(tiddler) {
					// If we've got a tiddler, the value to display is the field string value
					value = tiddler.getFieldString(this.editField);
				} else {
					// Otherwise, we need to construct a default value for the editor
					switch(this.editField) {
						case "text":
							value = "Type the text for the tiddler '" + this.editTitle + "'";
							break;
						case "title":
							value = this.editTitle;
							break;
						default:
							value = "";
							break;
					}
					if (this.editDefault !== undefined) {
						value = this.editDefault;
					}
				}
				update = function(value) {
					var tiddler = self.wiki.getTiddler(self.editTitle),
						updateFields = {
							title: self.editTitle
						};
					updateFields[self.editField] = value;
					self.wiki.addTiddler(new $tw.Tiddler(self.wiki.getCreationFields(),tiddler,updateFields,self.wiki.getModificationFields()));
				};
			}
			return {value: value, update: update};
		};		
		
		EditHtmlWidget.prototype.getAttribute = function () {
			//parameters are passed to parent so get them from there
			return this.parentWidget.getAttribute.apply(this.parentWidget, arguments);
		}
		 
		EditHtmlWidget.prototype.execute = function() {
			this.editTitle = this.getAttribute("tiddler",this.getVariable("currentTiddler"));
			this.editField = this.getAttribute("field","text");
			this.editIndex = this.getAttribute("index");
			this.editDefault = this.getAttribute("default");
			this.editClass = this.getAttribute("class");
			this.editPlaceholder = this.getAttribute("placeholder");
			this.editFocusPopup = this.getAttribute("focusPopup");
			this.onkeyupdate = this.getAttribute("onkeyupdate","yes"); 
			// Get the content type of the thing we're editing
			this.edittype = "";
			if(this.editField === "text") {
				var tiddler = this.wiki.getTiddler(this.editTitle);
				if(tiddler) {
					this.edittype = tiddler.fields.type;
				}
			}
			// only textarea can be visually edited
			this.editTag = "textarea"
		};

		/*
		Handle a dom "input" event
		*/
		EditHtmlWidget.prototype.handleInputEvent = function(event) {
			this.saveChanges(this.domNodes[0].firstChild.value);
			//this.fixHeight();
			return true;
		};

		EditHtmlWidget.prototype.handleFocusEvent = function(event) {
			if(this.editFocusPopup) {
				$tw.popup.triggerPopup({
					domNode: this.domNodes[0].firstChild,
					title: this.editFocusPopup,
					wiki: this.wiki,
					force: true
				});
			}
			return true;
		};		
		
		EditHtmlWidget.prototype.saveChanges = function(text) {
			var editInfo = this.getEditInfo();
			if(text !== editInfo.value) {
				editInfo.update(text);
			}
		};		
		
		exports["__!summernotebase__"] = EditHtmlWidget;//choose an unparseable name to make widget 'private'
		
		//-------------- base initialisation - ----------------

		var startup =  function () { 	
			var atiddler = $tw.wiki.getTiddler("$:/config/EditorTypeMappings/text/html");
			if (atiddler == undefined) {
						$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getCreationFields(),
						{title:"$:/config/EditorTypeMappings/text/html", text:"html"}));
			}
		}/* startup */	
		
		
		
		if($tw.browser)  {
			var head = document.getElementsByTagName('head')[0];
			var js = document.createElement("script");
			js.type = "text/javascript";
			js.onload = function() {  
				//do non-tree initialisation
				startup();
				ready = true;//BJ do this in startup
				//broadcast ready message
				$tw.wiki.setTextReference("$:/temp/summernote","ready");
				
				var bootstrapjs = document.createElement("script");
				bootstrapjs.src = "https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js";
				head.appendChild(bootstrapjs);
				
				var summernotejs = document.createElement("script");
				summernotejs.src = "https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js";
				summernotejs.onload = function() { 
					var summernote_wiki_embed_js = document.createElement("script");
					summernote_wiki_embed_js.src = "https://www.wikipress.pub/summernote-wiki-embed/summernote-wiki-embed.js";
					head.appendChild(summernote_wiki_embed_js);

					var summernote_wiki_embed_toc_js = document.createElement("script");
					summernote_wiki_embed_toc_js.src = "https://www.wikipress.pub/summernote-wiki-embed/summernote-wiki-embed-toc.js";
					head.appendChild(summernote_wiki_embed_toc_js);
				}
				head.appendChild(summernotejs);
			}
			js.src = "https://code.jquery.com/jquery-3.5.1.min.js";
			head.appendChild(js);
			
		}	
		
		
		var LoadWidget = function(parseTreeNode,options) {
			this.initialise(parseTreeNode,options);
		};
		 
		LoadWidget.prototype = new Widget();



		LoadWidget.prototype.getLoadingMessage = function() {
			var message = "<h2>loading summernote</h2>",
				parser = this.wiki.parseText("text/vnd.tiddlywiki",message,{parseAsInline: true});
			if(parser) {
				return parser.tree;
			} else {
				return [];
			}
		};		
		
		LoadWidget.prototype.render = function(parent,nextSibling) {
			this.parentDomNode = parent;
			this.computeAttributes();
			this.execute();
			this.renderChildren(parent,nextSibling);
		};
		
		LoadWidget.prototype.execute = function() {
			if (ready) {
				// insert the real widget
				this.makeChildWidgets([{type: "__!summernotebase__"}]);			
			}
			else this.makeChildWidgets(this.getLoadingMessage());
		};		
		
		LoadWidget.prototype.refresh = function(changedTiddlers) {
			var changedAttributes = this.computeAttributes();
			// Refresh if an attribute has changed, or the 'lib is loaded' is indicated
			if(Object.keys(changedAttributes).length || changedTiddlers["$:/temp/summernote"]) {
				this.refreshSelf();
				return true;
			} else {
				return this.refreshChildren(changedTiddlers);		
			}
		};

		LoadWidget.prototype.invokeAction = function(triggeringWidget,event) {
			this.invokeActions(this,event);
			return true; // Action was invoked
		};


		exports["edit-html"] = LoadWidget;
		//exports["edit-x-htmlp"] = LoadWidget;
		
	})();
}/* end if($tw.browser )  */